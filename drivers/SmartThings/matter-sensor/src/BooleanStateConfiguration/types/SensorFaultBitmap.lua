-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.BooleanStateConfiguration.types.SensorFaultBitmap
--- @alias SensorFaultBitmap
---
--- @field public GENERAL_FAULT number 1

local SensorFaultBitmap = {}
local new_mt = UintABC.new_mt({NAME = "SensorFaultBitmap", ID = data_types.name_to_id_map["Uint16"]}, 2)

SensorFaultBitmap.BASE_MASK = 0xFFFF
SensorFaultBitmap.GENERAL_FAULT = 0x0001

SensorFaultBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  GENERAL_FAULT = 0x0001,
}

--- @function SensorFaultBitmap:is_general_fault_set
--- @return boolean True if the value of GENERAL_FAULT is non-zero
SensorFaultBitmap.is_general_fault_set = function(self)
  return (self.value & self.GENERAL_FAULT) ~= 0
end

--- @function SensorFaultBitmap:set_general_fault
--- Set the value of the bit in the GENERAL_FAULT field to 1
SensorFaultBitmap.set_general_fault = function(self)
  if self.value ~= nil then
    self.value = self.value | self.GENERAL_FAULT
  else
    self.value = self.GENERAL_FAULT
  end
end

--- @function SensorFaultBitmap:unset_general_fault
--- Set the value of the bits in the GENERAL_FAULT field to 0
SensorFaultBitmap.unset_general_fault = function(self)
  self.value = self.value & (~self.GENERAL_FAULT & self.BASE_MASK)
end


SensorFaultBitmap.mask_methods = {
  is_general_fault_set = SensorFaultBitmap.is_general_fault_set,
  set_general_fault = SensorFaultBitmap.set_general_fault,
  unset_general_fault = SensorFaultBitmap.unset_general_fault,
}

SensorFaultBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(SensorFaultBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BooleanStateConfiguration.types.SensorFaultBitmap")
if has_aliases then
  aliases:add_to_class(SensorFaultBitmap)
end

return SensorFaultBitmap
