-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.ServiceArea.types.Feature
--- @alias Feature
---
--- @field public SELECT_WHILE_RUNNING number 1
--- @field public PROGRESS_REPORTING number 2
--- @field public MAPS number 4

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.SELECT_WHILE_RUNNING = 0x0001
Feature.PROGRESS_REPORTING = 0x0002
Feature.MAPS = 0x0004

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  SELECT_WHILE_RUNNING = 0x0001,
  PROGRESS_REPORTING = 0x0002,
  MAPS = 0x0004,
}

--- @function Feature:is_select_while_running_set
--- @return boolean True if the value of SELECT_WHILE_RUNNING is non-zero
Feature.is_select_while_running_set = function(self)
  return (self.value & self.SELECT_WHILE_RUNNING) ~= 0
end

--- @function Feature:set_select_while_running
--- Set the value of the bit in the SELECT_WHILE_RUNNING field to 1
Feature.set_select_while_running = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SELECT_WHILE_RUNNING
  else
    self.value = self.SELECT_WHILE_RUNNING
  end
end

--- @function Feature:unset_select_while_running
--- Set the value of the bits in the SELECT_WHILE_RUNNING field to 0
Feature.unset_select_while_running = function(self)
  self.value = self.value & (~self.SELECT_WHILE_RUNNING & self.BASE_MASK)
end
--- @function Feature:is_progress_reporting_set
--- @return boolean True if the value of PROGRESS_REPORTING is non-zero
Feature.is_progress_reporting_set = function(self)
  return (self.value & self.PROGRESS_REPORTING) ~= 0
end

--- @function Feature:set_progress_reporting
--- Set the value of the bit in the PROGRESS_REPORTING field to 1
Feature.set_progress_reporting = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PROGRESS_REPORTING
  else
    self.value = self.PROGRESS_REPORTING
  end
end

--- @function Feature:unset_progress_reporting
--- Set the value of the bits in the PROGRESS_REPORTING field to 0
Feature.unset_progress_reporting = function(self)
  self.value = self.value & (~self.PROGRESS_REPORTING & self.BASE_MASK)
end
--- @function Feature:is_maps_set
--- @return boolean True if the value of MAPS is non-zero
Feature.is_maps_set = function(self)
  return (self.value & self.MAPS) ~= 0
end

--- @function Feature:set_maps
--- Set the value of the bit in the MAPS field to 1
Feature.set_maps = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MAPS
  else
    self.value = self.MAPS
  end
end

--- @function Feature:unset_maps
--- Set the value of the bits in the MAPS field to 0
Feature.unset_maps = function(self)
  self.value = self.value & (~self.MAPS & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.SELECT_WHILE_RUNNING |
    Feature.PROGRESS_REPORTING |
    Feature.MAPS
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_select_while_running_set = Feature.is_select_while_running_set,
  set_select_while_running = Feature.set_select_while_running,
  unset_select_while_running = Feature.unset_select_while_running,
  is_progress_reporting_set = Feature.is_progress_reporting_set,
  set_progress_reporting = Feature.set_progress_reporting,
  unset_progress_reporting = Feature.unset_progress_reporting,
  is_maps_set = Feature.is_maps_set,
  set_maps = Feature.set_maps,
  unset_maps = Feature.unset_maps,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

return Feature

